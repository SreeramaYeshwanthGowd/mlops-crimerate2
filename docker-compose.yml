# version: '3'

services:
  # Zookeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Kafka producer service
  kafka-producer:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ./data_ingestion:/app/data_ingestion

  # Spark master service
  spark-master:
    image: bitnami/spark:3.3.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"

  # Spark worker service
  spark-worker:
    image: bitnami/spark:3.3.0
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8081:8081"

  # Spark streaming service
  spark-streaming:
    build:
      context: .
      dockerfile: docker/Dockerfile.spark
    container_name: spark-streaming
    depends_on:
      - spark-master
      - kafka
    environment:
      SPARK_MASTER: spark://spark-master:7077
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ./data_processing:/app/data_processing
      - ./data:/app/data

  # MLflow service
  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_TRACKING_URI: http://localhost:5000
    volumes:
      - ./mlruns:/mlruns

  # Model API service
  model-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: model-api
    depends_on:
      - mlflow
    ports:
      - "5001:5000"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
    volumes:
      - ./model:/app/model

  # Dashboard service
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: dashboard
    depends_on:
      - model-api
    ports:
      - "8050:8050"
    environment:
      API_ENDPOINT: http://model-api:5000/predict
    volumes:
      - ./dashboard:/app/dashboard

  # # Rasa chatbot service
  # rasa:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.rasa
  #   container_name: rasa
  #   ports:
  #     - "5005:5005"
  #   volumes:
  #     - ./chatbot:/app/chatbot

#   # Prometheus service
#   prometheus:
#     image: prom/prometheus:v2.37.0
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'

#   # Grafana service
#   grafana:
#     image: grafana/grafana:9.1.0
#     container_name: grafana
#     depends_on:
#       - prometheus
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
#       - grafana_data:/var/lib/grafana

# volumes:
#   prometheus_data:
#   grafana_data:
